from django.core.management.base import AppCommand
from django.db import DEFAULT_DB_ALIAS, connections


class Command(AppCommand):
<<<<<<< HEAD
    help = 'Prints the SQL statements for resetting sequences for the given app name(s).'
=======
    help = (
        "Prints the SQL statements for resetting sequences for the given app name(s)."
    )
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581

    output_transaction = True

    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument(
<<<<<<< HEAD
            '--database', default=DEFAULT_DB_ALIAS,
            help='Nominates a database to print the SQL for. Defaults to the "default" database.',
=======
            "--database",
            default=DEFAULT_DB_ALIAS,
            help=(
                'Nominates a database to print the SQL for. Defaults to the "default" '
                "database."
            ),
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
        )

    def handle_app_config(self, app_config, **options):
        if app_config.models_module is None:
            return
<<<<<<< HEAD
        connection = connections[options['database']]
        models = app_config.get_models(include_auto_created=True)
        statements = connection.ops.sequence_reset_sql(self.style, models)
        if not statements and options['verbosity'] >= 1:
            self.stderr.write('No sequences found.')
        return '\n'.join(statements)
=======
        connection = connections[options["database"]]
        models = app_config.get_models(include_auto_created=True)
        statements = connection.ops.sequence_reset_sql(self.style, models)
        if not statements and options["verbosity"] >= 1:
            self.stderr.write("No sequences found.")
        return "\n".join(statements)
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581

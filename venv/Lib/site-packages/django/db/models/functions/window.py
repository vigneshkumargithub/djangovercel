from django.db.models.expressions import Func
from django.db.models.fields import FloatField, IntegerField

__all__ = [
<<<<<<< HEAD
    'CumeDist', 'DenseRank', 'FirstValue', 'Lag', 'LastValue', 'Lead',
    'NthValue', 'Ntile', 'PercentRank', 'Rank', 'RowNumber',
=======
    "CumeDist",
    "DenseRank",
    "FirstValue",
    "Lag",
    "LastValue",
    "Lead",
    "NthValue",
    "Ntile",
    "PercentRank",
    "Rank",
    "RowNumber",
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
]


class CumeDist(Func):
<<<<<<< HEAD
    function = 'CUME_DIST'
=======
    function = "CUME_DIST"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    output_field = FloatField()
    window_compatible = True


class DenseRank(Func):
<<<<<<< HEAD
    function = 'DENSE_RANK'
=======
    function = "DENSE_RANK"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    output_field = IntegerField()
    window_compatible = True


class FirstValue(Func):
    arity = 1
<<<<<<< HEAD
    function = 'FIRST_VALUE'
=======
    function = "FIRST_VALUE"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    window_compatible = True


class LagLeadFunction(Func):
    window_compatible = True

    def __init__(self, expression, offset=1, default=None, **extra):
        if expression is None:
            raise ValueError(
<<<<<<< HEAD
                '%s requires a non-null source expression.' %
                self.__class__.__name__
            )
        if offset is None or offset <= 0:
            raise ValueError(
                '%s requires a positive integer for the offset.' %
                self.__class__.__name__
=======
                "%s requires a non-null source expression." % self.__class__.__name__
            )
        if offset is None or offset <= 0:
            raise ValueError(
                "%s requires a positive integer for the offset."
                % self.__class__.__name__
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
            )
        args = (expression, offset)
        if default is not None:
            args += (default,)
        super().__init__(*args, **extra)

    def _resolve_output_field(self):
        sources = self.get_source_expressions()
        return sources[0].output_field


class Lag(LagLeadFunction):
<<<<<<< HEAD
    function = 'LAG'
=======
    function = "LAG"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581


class LastValue(Func):
    arity = 1
<<<<<<< HEAD
    function = 'LAST_VALUE'
=======
    function = "LAST_VALUE"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    window_compatible = True


class Lead(LagLeadFunction):
<<<<<<< HEAD
    function = 'LEAD'


class NthValue(Func):
    function = 'NTH_VALUE'
=======
    function = "LEAD"


class NthValue(Func):
    function = "NTH_VALUE"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    window_compatible = True

    def __init__(self, expression, nth=1, **extra):
        if expression is None:
<<<<<<< HEAD
            raise ValueError('%s requires a non-null source expression.' % self.__class__.__name__)
        if nth is None or nth <= 0:
            raise ValueError('%s requires a positive integer as for nth.' % self.__class__.__name__)
=======
            raise ValueError(
                "%s requires a non-null source expression." % self.__class__.__name__
            )
        if nth is None or nth <= 0:
            raise ValueError(
                "%s requires a positive integer as for nth." % self.__class__.__name__
            )
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
        super().__init__(expression, nth, **extra)

    def _resolve_output_field(self):
        sources = self.get_source_expressions()
        return sources[0].output_field


class Ntile(Func):
<<<<<<< HEAD
    function = 'NTILE'
=======
    function = "NTILE"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    output_field = IntegerField()
    window_compatible = True

    def __init__(self, num_buckets=1, **extra):
        if num_buckets <= 0:
<<<<<<< HEAD
            raise ValueError('num_buckets must be greater than 0.')
=======
            raise ValueError("num_buckets must be greater than 0.")
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
        super().__init__(num_buckets, **extra)


class PercentRank(Func):
<<<<<<< HEAD
    function = 'PERCENT_RANK'
=======
    function = "PERCENT_RANK"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    output_field = FloatField()
    window_compatible = True


class Rank(Func):
<<<<<<< HEAD
    function = 'RANK'
=======
    function = "RANK"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    output_field = IntegerField()
    window_compatible = True


class RowNumber(Func):
<<<<<<< HEAD
    function = 'ROW_NUMBER'
=======
    function = "ROW_NUMBER"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    output_field = IntegerField()
    window_compatible = True

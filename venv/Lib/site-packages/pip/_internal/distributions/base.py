import abc
<<<<<<< HEAD
from typing import Optional

from pip._vendor.pkg_resources import Distribution

from pip._internal.index.package_finder import PackageFinder
from pip._internal.req import InstallRequirement

=======
<<<<<<< HEAD
from typing import TYPE_CHECKING, Optional

from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement

if TYPE_CHECKING:
    from pip._internal.index.package_finder import PackageFinder

=======

from pip._internal.index.package_finder import PackageFinder
from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement

>>>>>>> f11c6dfe4dac5bf5ab7bec429f691c1b69370e6a
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581

class AbstractDistribution(metaclass=abc.ABCMeta):
    """A base class for handling installable artifacts.

    The requirements for anything installable are as follows:

     - we must be able to determine the requirement name
       (or we can't correctly handle the non-upgrade case).

     - for packages with setup requirements, we must also be able
       to determine their requirements without installing additional
       packages (for the same reason as run-time dependencies)

     - we must be able to create a Distribution object exposing the
       above metadata.
<<<<<<< HEAD
=======
<<<<<<< HEAD

     - if we need to do work in the build tracker, we must be able to generate a unique
       string to identify the requirement in the build tracker.
=======
>>>>>>> f11c6dfe4dac5bf5ab7bec429f691c1b69370e6a
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    """

    def __init__(self, req: InstallRequirement) -> None:
        super().__init__()
        self.req = req

<<<<<<< HEAD
    @abc.abstractmethod
    def get_pkg_resources_distribution(self) -> Optional[Distribution]:
=======
<<<<<<< HEAD
    @abc.abstractproperty
    def build_tracker_id(self) -> Optional[str]:
        """A string that uniquely identifies this requirement to the build tracker.

        If None, then this dist has no work to do in the build tracker, and
        ``.prepare_distribution_metadata()`` will not be called."""
        raise NotImplementedError()

=======
>>>>>>> f11c6dfe4dac5bf5ab7bec429f691c1b69370e6a
    @abc.abstractmethod
    def get_metadata_distribution(self) -> BaseDistribution:
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(
<<<<<<< HEAD
        self, finder: PackageFinder, build_isolation: bool
=======
        self,
<<<<<<< HEAD
        finder: "PackageFinder",
=======
        finder: PackageFinder,
>>>>>>> f11c6dfe4dac5bf5ab7bec429f691c1b69370e6a
        build_isolation: bool,
        check_build_deps: bool,
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    ) -> None:
        raise NotImplementedError()

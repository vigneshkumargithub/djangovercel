"""This is a subpackage because the directory is on sys.path for _in_process.py

The subpackage should stay as empty as possible to avoid shadowing modules that
the backend might import.
"""
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
from os.path import dirname, abspath, join as pjoin
from contextlib import contextmanager

try:
    import importlib.resources as resources

    def _in_proc_script_path():
        return resources.path(__package__, '_in_process.py')
except ImportError:
<<<<<<< HEAD
=======
=======
from contextlib import contextmanager
from os.path import abspath, dirname
from os.path import join as pjoin

try:
    import importlib.resources as resources
    try:
        resources.files
    except AttributeError:
        # Python 3.8 compatibility
        def _in_proc_script_path():
            return resources.path(__package__, '_in_process.py')
    else:
        def _in_proc_script_path():
            return resources.as_file(
                resources.files(__package__).joinpath('_in_process.py'))
except ImportError:
    # Python 3.6 compatibility
>>>>>>> f11c6dfe4dac5bf5ab7bec429f691c1b69370e6a
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    @contextmanager
    def _in_proc_script_path():
        yield pjoin(dirname(abspath(__file__)), '_in_process.py')

#
# The Python Imaging Library
# $Id$
#
# GRIB stub adapter
#
# Copyright (c) 1996-2003 by Fredrik Lundh
#
# See the README file for information on usage and redistribution.
#
<<<<<<< HEAD
=======
from __future__ import annotations

from typing import IO
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581

from . import Image, ImageFile

_handler = None


<<<<<<< HEAD
def register_handler(handler):
=======
def register_handler(handler: ImageFile.StubHandler | None) -> None:
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    """
    Install application-specific GRIB image handler.

    :param handler: Handler object.
    """
    global _handler
    _handler = handler


# --------------------------------------------------------------------
# Image adapter


<<<<<<< HEAD
def _accept(prefix):
    return prefix[0:4] == b"GRIB" and prefix[7] == 1


class GribStubImageFile(ImageFile.StubImageFile):

    format = "GRIB"
    format_description = "GRIB"

    def _open(self):

        offset = self.fp.tell()

        if not _accept(self.fp.read(8)):
            raise SyntaxError("Not a GRIB file")
=======
def _accept(prefix: bytes) -> bool:
    return prefix[:4] == b"GRIB" and prefix[7] == 1


class GribStubImageFile(ImageFile.StubImageFile):
    format = "GRIB"
    format_description = "GRIB"

    def _open(self) -> None:
        offset = self.fp.tell()

        if not _accept(self.fp.read(8)):
            msg = "Not a GRIB file"
            raise SyntaxError(msg)
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581

        self.fp.seek(offset)

        # make something up
<<<<<<< HEAD
        self.mode = "F"
=======
        self._mode = "F"
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
        self._size = 1, 1

        loader = self._load()
        if loader:
            loader.open(self)

<<<<<<< HEAD
    def _load(self):
        return _handler


def _save(im, fp, filename):
    if _handler is None or not hasattr("_handler", "save"):
        raise OSError("GRIB save handler not installed")
=======
    def _load(self) -> ImageFile.StubHandler | None:
        return _handler


def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
    if _handler is None or not hasattr(_handler, "save"):
        msg = "GRIB save handler not installed"
        raise OSError(msg)
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
    _handler.save(im, fp, filename)


# --------------------------------------------------------------------
# Registry

Image.register_open(GribStubImageFile.format, GribStubImageFile, _accept)
Image.register_save(GribStubImageFile.format, _save)

Image.register_extension(GribStubImageFile.format, ".grib")

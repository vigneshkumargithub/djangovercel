#
# The Python Imaging Library.
# $Id$
#
# standard mode descriptors
#
# History:
# 2006-03-20 fl   Added
#
# Copyright (c) 2006 by Secret Labs AB.
# Copyright (c) 2006 by Fredrik Lundh.
#
# See the README file for information on usage and redistribution.
#
<<<<<<< HEAD

# mode descriptor cache
_modes = None


class ModeDescriptor:
    """Wrapper for mode strings."""

    def __init__(self, mode, bands, basemode, basetype):
        self.mode = mode
        self.bands = bands
        self.basemode = basemode
        self.basetype = basetype

    def __str__(self):
        return self.mode


def getmode(mode):
    """Gets a mode descriptor for the given mode."""
    global _modes
    if not _modes:
        # initialize mode cache
        modes = {}
        for m, (basemode, basetype, bands) in {
            # core modes
            "1": ("L", "L", ("1",)),
            "L": ("L", "L", ("L",)),
            "I": ("L", "I", ("I",)),
            "F": ("L", "F", ("F",)),
            "P": ("P", "L", ("P",)),
            "RGB": ("RGB", "L", ("R", "G", "B")),
            "RGBX": ("RGB", "L", ("R", "G", "B", "X")),
            "RGBA": ("RGB", "L", ("R", "G", "B", "A")),
            "CMYK": ("RGB", "L", ("C", "M", "Y", "K")),
            "YCbCr": ("RGB", "L", ("Y", "Cb", "Cr")),
            "LAB": ("RGB", "L", ("L", "A", "B")),
            "HSV": ("RGB", "L", ("H", "S", "V")),
            # extra experimental modes
            "RGBa": ("RGB", "L", ("R", "G", "B", "a")),
            "LA": ("L", "L", ("L", "A")),
            "La": ("L", "L", ("L", "a")),
            "PA": ("RGB", "L", ("P", "A")),
        }.items():
            modes[m] = ModeDescriptor(m, bands, basemode, basetype)
        # mapping modes
        for i16mode in (
            "I;16",
            "I;16S",
            "I;16L",
            "I;16LS",
            "I;16B",
            "I;16BS",
            "I;16N",
            "I;16NS",
        ):
            modes[i16mode] = ModeDescriptor(i16mode, ("I",), "L", "L")
        # set global mode cache atomically
        _modes = modes
    return _modes[mode]
=======
from __future__ import annotations

import sys
from functools import lru_cache
from typing import NamedTuple

from ._deprecate import deprecate


class ModeDescriptor(NamedTuple):
    """Wrapper for mode strings."""

    mode: str
    bands: tuple[str, ...]
    basemode: str
    basetype: str
    typestr: str

    def __str__(self) -> str:
        return self.mode


@lru_cache
def getmode(mode: str) -> ModeDescriptor:
    """Gets a mode descriptor for the given mode."""
    endian = "<" if sys.byteorder == "little" else ">"

    modes = {
        # core modes
        # Bits need to be extended to bytes
        "1": ("L", "L", ("1",), "|b1"),
        "L": ("L", "L", ("L",), "|u1"),
        "I": ("L", "I", ("I",), f"{endian}i4"),
        "F": ("L", "F", ("F",), f"{endian}f4"),
        "P": ("P", "L", ("P",), "|u1"),
        "RGB": ("RGB", "L", ("R", "G", "B"), "|u1"),
        "RGBX": ("RGB", "L", ("R", "G", "B", "X"), "|u1"),
        "RGBA": ("RGB", "L", ("R", "G", "B", "A"), "|u1"),
        "CMYK": ("RGB", "L", ("C", "M", "Y", "K"), "|u1"),
        "YCbCr": ("RGB", "L", ("Y", "Cb", "Cr"), "|u1"),
        # UNDONE - unsigned |u1i1i1
        "LAB": ("RGB", "L", ("L", "A", "B"), "|u1"),
        "HSV": ("RGB", "L", ("H", "S", "V"), "|u1"),
        # extra experimental modes
        "RGBa": ("RGB", "L", ("R", "G", "B", "a"), "|u1"),
        "BGR;15": ("RGB", "L", ("B", "G", "R"), "|u1"),
        "BGR;16": ("RGB", "L", ("B", "G", "R"), "|u1"),
        "BGR;24": ("RGB", "L", ("B", "G", "R"), "|u1"),
        "LA": ("L", "L", ("L", "A"), "|u1"),
        "La": ("L", "L", ("L", "a"), "|u1"),
        "PA": ("RGB", "L", ("P", "A"), "|u1"),
    }
    if mode in modes:
        if mode in ("BGR;15", "BGR;16", "BGR;24"):
            deprecate(mode, 12)
        base_mode, base_type, bands, type_str = modes[mode]
        return ModeDescriptor(mode, bands, base_mode, base_type, type_str)

    mapping_modes = {
        # I;16 == I;16L, and I;32 == I;32L
        "I;16": "<u2",
        "I;16S": "<i2",
        "I;16L": "<u2",
        "I;16LS": "<i2",
        "I;16B": ">u2",
        "I;16BS": ">i2",
        "I;16N": f"{endian}u2",
        "I;16NS": f"{endian}i2",
        "I;32": "<u4",
        "I;32B": ">u4",
        "I;32L": "<u4",
        "I;32S": "<i4",
        "I;32BS": ">i4",
        "I;32LS": "<i4",
    }

    type_str = mapping_modes[mode]
    return ModeDescriptor(mode, ("I",), "L", "L", type_str)
>>>>>>> 32e7214c1350fb4a88064960159c92207483e581
